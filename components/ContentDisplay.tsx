import React, { useState } from 'react';
import type { GeneratedContent } from '../types';
import { BookOpenIcon } from './icons/BookOpenIcon';
import { ClipboardListIcon } from './icons/ClipboardListIcon';
import { GoogleSlidesIcon } from './icons/GoogleSlidesIcon';
import { ClipboardCopyIcon } from './icons/ClipboardCopyIcon';
import { CheckIcon } from './icons/CheckIcon';
import Modal from './Modal';
import CodeBlock from './CodeBlock';

interface ContentDisplayProps {
  content: GeneratedContent;
  topic: string;
}

const ContentDisplay: React.FC<ContentDisplayProps> = ({ content, topic }) => {
  const { lessonPlan, interviewQuestions } = content;
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [scriptContent, setScriptContent] = useState('');
  const [isTextCopied, setIsTextCopied] = useState(false);

  const generateAppsScript = () => {
    // Escape the topic to be safely embedded in the script string
    const safeTopic = (topic || 'My Presentation').replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    const lessonPlanJSON = JSON.stringify(content.lessonPlan, null, 2);

    const script = `/**
 * Google Apps Script to Generate a Presentation from EduGenius Bot data.
 *
 * How to use:
 * 1. Open a new Google Slides presentation: https://slides.google.com/create
 * 2. In the menu, go to: Extensions > Apps Script
 * 3. Delete any placeholder code in the editor.
 * 4. Paste this entire script into the editor.
 * 5. Click the "Save project" icon (floppy disk icon).
 * 6. Click the "Run" button (play icon).
 * 7. A pop-up will ask for authorization. Grant the necessary permissions.
 * 8. Return to your Google Slides tab. Your presentation is now ready!
 */
function createPresentationFromEduGenius() {
  // Data generated by EduGenius Bot.
  const presentationTitle = "${safeTopic}";
  const lessonPlan = ${lessonPlanJSON};

  const pres = SlidesApp.getActivePresentation();
  
  // Clear existing slides to start fresh.
  // Using .slice() creates a copy, which is necessary to avoid issues when
  // removing items from a list while iterating over it.
  pres.getSlides().slice().forEach(slide => slide.remove());
  
  // Create the Title Slide
  const titleSlide = pres.appendSlide(SlidesApp.PredefinedLayout.TITLE_SLIDE);
  titleSlide.getPlaceholder(SlidesApp.PlaceholderType.TITLE).asShape().getText().setText(presentationTitle);
  titleSlide.getPlaceholder(SlidesApp.PlaceholderType.SUBTITLE).asShape().getText().setText("Generated by EduGenius Bot");
  
  // Create a Content Slide for each item in the lesson plan
  lessonPlan.sort((a,b) => a.slide - b.slide).forEach(slideData => {
    const slide = pres.appendSlide(SlidesApp.PredefinedLayout.TITLE_AND_BODY);
    const title = slide.getPlaceholder(SlidesApp.PlaceholderType.TITLE);
    const body = slide.getPlaceholder(SlidesApp.PlaceholderType.BODY);
    
    // Set the title for the slide
    title.asShape().getText().setText(\`Slide \${slideData.slide}: \${slideData.title}\`);
    
    // Set the body content with bullet points
    const bodyText = slideData.points.map(p => \`• \${p}\`).join('\\n');
    body.asShape().getText().setText(bodyText);
  });
}`;
    setScriptContent(script);
    setIsModalOpen(true);
  };
  
  const handleCopyResponseText = () => {
    if (isTextCopied) return;

    const lessonPlanText = lessonPlan
      .sort((a, b) => a.slide - b.slide)
      .map(slide => {
        const title = `Slide ${slide.slide}: ${slide.title}`;
        const points = slide.points.map(p => `• ${p}`).join('\n');
        return `${title}\n${points}`;
      })
      .join('\n\n --- \n\n');

    const interviewQuestionsText = interviewQuestions
      .map((qa) => {
        const question = `Q: ${qa.question}`;
        const answer = `A: ${qa.answer}`;
        return `${question}\n${answer}`;
      })
      .join('\n\n');

    const fullResponse = `LESSON PLAN\n\n${lessonPlanText}\n\n\nINTERVIEW Q&A\n\n${interviewQuestionsText}`;

    navigator.clipboard.writeText(fullResponse).then(() => {
      setIsTextCopied(true);
      setTimeout(() => setIsTextCopied(false), 2500);
    }).catch(err => {
        console.error("Failed to copy response text: ", err);
    });
  };


  return (
    <>
      <Modal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        title="Export to Google Slides"
      >
        <div className="space-y-4 text-slate-300">
           <p>Follow these steps to generate your Google Slides presentation:</p>
           <ol className="list-decimal list-inside space-y-2 pl-2 bg-slate-900/50 p-3 rounded-lg">
                <li>Click the "Copy Code" button below.</li>
                <li>Open a <a href="https://slides.google.com/create" target="_blank" rel="noopener noreferrer" className="text-teal-400 hover:underline">new Google Slides presentation</a>.</li>
                <li>In the menu, navigate to <span className="font-mono bg-slate-700/80 px-1 py-0.5 rounded">Extensions &gt; Apps Script</span>.</li>
                <li>Delete any placeholder code and paste the script you copied.</li>
                <li>Click the "Save project" icon, then click "Run".</li>
                <li>Authorize the script when prompted.</li>
                <li>Return to the Google Slides tab to see your presentation!</li>
            </ol>
           <CodeBlock code={scriptContent} />
        </div>
      </Modal>

      <div className="space-y-8">
        {/* Lesson Plan Section */}
        <div className="bg-slate-800/50 p-6 rounded-xl border border-slate-700">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 flex items-center justify-center bg-teal-500/20 text-teal-300 rounded-lg">
              <BookOpenIcon />
            </div>
            <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-teal-300 to-sky-400">Lesson Plan</h2>
          </div>
          <div className="space-y-5">
            {lessonPlan.sort((a,b) => a.slide - b.slide).map((slide) => (
              <div key={slide.slide} className="p-4 bg-slate-900/50 rounded-lg">
                <h3 className="font-semibold text-lg text-slate-200 mb-2">
                  <span className="text-teal-400">Slide {slide.slide}:</span> {slide.title}
                </h3>
                <ul className="list-disc list-inside space-y-1 pl-2 text-slate-300">
                  {slide.points.map((point, i) => (
                    <li key={i}>{point}</li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>

        {/* Interview Questions Section */}
        <div className="bg-slate-800/50 p-6 rounded-xl border border-slate-700">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 flex items-center justify-center bg-sky-500/20 text-sky-300 rounded-lg">
              <ClipboardListIcon />
            </div>
            <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-sky-400 to-teal-300">Interview Q&A</h2>
          </div>
          <div className="space-y-5">
            {interviewQuestions.map((qa, index) => (
              <div key={index} className="p-4 bg-slate-900/50 rounded-lg">
                <h3 className="font-semibold text-lg text-slate-200 mb-2">
                  <span className="text-sky-400">Q:</span> {qa.question}
                </h3>
                <p className="text-slate-300 whitespace-pre-wrap"><span className="font-bold text-slate-200">A:</span> {qa.answer}</p>
              </div>
            ))}
          </div>
        </div>
        
        {/* Action Buttons Section */}
        <div className="flex flex-wrap justify-center items-center gap-4 mt-8">
            <button 
              onClick={generateAppsScript}
              className="flex items-center gap-3 px-5 py-2.5 font-semibold bg-gradient-to-br from-teal-500 to-sky-600 text-white rounded-lg hover:from-teal-600 hover:to-sky-700 transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-teal-400 shadow-lg"
            >
              <GoogleSlidesIcon />
              Export to Google Slides
            </button>
            <button
                onClick={handleCopyResponseText}
                disabled={isTextCopied}
                className="flex items-center gap-2 px-5 py-2.5 font-semibold bg-slate-700/50 text-slate-200 rounded-lg hover:bg-slate-700 hover:text-white transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-teal-400 shadow-lg disabled:opacity-70 disabled:cursor-not-allowed"
            >
                {isTextCopied ? <CheckIcon /> : <ClipboardCopyIcon />}
                <span>{isTextCopied ? 'Copied!' : 'Copy Response Text'}</span>
            </button>
        </div>

      </div>
    </>
  );
};

export default ContentDisplay;